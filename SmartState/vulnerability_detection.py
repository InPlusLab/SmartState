import os
import pandas as pd
from find_state_var_dependency import*
from main_detection import*
from ReadandWrite_analyzer import*
from taintanalysis import*
import time
from func_timeout import func_set_timeout
import func_timeout
import datetime
from TSDgeneration import *

#b=pd.read_csv("dapp_Result.csv",header=None)

analyze_before=[]
#for n in range(0,len(b)):
    #analyze_before.append(b.iloc[n,0])

hex_path='./experiment/demo/bytecode'
tran_path="./experiment/demo/transaction_trace"
writepath=os.path.dirname(os.path.abspath(__file__))
k1=0
#decompilation
for file_name in os.listdir(hex_path):
    k1+=1
    print(k1,file_name)
    os.system("python3 ./gigahorse/gigahorse-toolchain/gigahorse.py -C ./gigahorse/gigahorse-toolchain/clients/visualizeout.py ./experiment/demo/bytecode/"+file_name)

@func_set_timeout(600)
def vulnerability_analysis(out_path,file_name,tran_path):
    vul_block=[]
    vul_function=[]
    taint_stor=[]
    file_address=file_name[:42]
    TSDgeneration(tran_path,file_address,out_path)
    find_SVD (out_path)
    RAW_analysis(out_path)
    vul_block,vul_function=detection(out_path)
    taint_stor=taint_analysis(out_path,vul_block)
    function_str='0'
    for i in range(0,len(vul_function)):
        function_str=function_str+','+vul_function[i]
    stor_str='0'
    for j in range(0,len(taint_stor)):
        stor_str=stor_str+','+taint_stor[j]    
    file_address=file_name[:42]
    return file_address, function_str, stor_str
    

result=[]
k2=0
for file_name in os.listdir(hex_path):
    #os.system("python3 ./gigahorse/gigahorse-toolchain/gigahorse.py -C ./gigahorse/gigahorse-toolchain/clients/visualizeout.py experiment/ran_hex/"+file_name)
    if(file_name[:42] not in analyze_before):
        start = time.time()
        k2+=1
        print(k2, file_name)    
        out_path=".temp/"+file_name[:42]+"/out"
        
        if('contract.tac'in os.listdir(out_path)):
            try:
                file_address, function_str, stor_str=vulnerability_analysis(out_path,file_name,tran_path)
                #result.append(analysis_result)
            except func_timeout.exceptions.FunctionTimedOut as e:
                file_address=file_name[:42]
                function_str='timeout'
                stor_str='timeout'
                #result.append(file_name[:42]+';timeout')
            # writepath=os.path.dirname(os.path.abspath(__file__))
            os.chdir(writepath)     
            with open("demo_profitgain.csv",'a+',newline='',encoding='UTF-8') as f_c_csv:
                writer = csv.writer(f_c_csv) 
                writer.writerow([file_address, function_str, stor_str]) 
        end = time.time()
        runTime = end - start
    else:
        print(file_name[:42],"in analyze_before")        

  
    
#python3 vulnerability_detection.py
#cd /pro/decom/FSE