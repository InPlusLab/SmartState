#include "global.dl"


/*
 * Very simple context sensitivity that includes only public function signature
 *
 */
.type Context = FunctionSignature

.decl InitialContext(ctx : Context)

InitialContext("0x0").

.decl MergeContext(ctx: Context, caller: Block, newContext: Context)

MergeContext(ctx, caller, as(sigHash, symbol)) :-
  ReachableContext(ctx, caller),
  postTrans.PublicFunction(caller, sigHash).

MergeContext(ctx, caller, ctx) :-
  ReachableContext(ctx, caller),
  !postTrans.PublicFunction(caller, _).

/* start aggregating analytics by context (i.e., public function) */

.decl Contexts(ctx: Context)

Contexts(ctx) :- ReachableContext(ctx, _).

.decl FeatureName(name: symbol)
FeatureName("C_INS").
FeatureName("C_Variables").
FeatureName("C_Edges").
FeatureName("C_BlockOutputContents").
FeatureName("MaxPopDelta").
FeatureName("MaxStackDelta").
FeatureName("C_Jumps").
FeatureName("C_NonImmediateJumps").
FeatureName("C_NonImmediateJumpTargets").
FeatureName("C_StackBalancingBlocks").
FeatureName("C_StackBalancingBlockTargets").
FeatureName("C_CALLDATALOADs").
FeatureName("C_CALLDATACOPIEs").
FeatureName("C_SLOADs").
FeatureName("C_SSTOREs").
FeatureName("MaxDup").
FeatureName("C_REVERTs").
FeatureName("C_ExternalCalls").
FeatureName("MaxOpcodePop").

.decl MaxFeat(name: symbol)
MaxFeat("MaxOpcodePop").
MaxFeat("MaxDup").
MaxFeat("MaxPopDelta").
MaxFeat("MaxStackDelta").

.decl PreAnalysisFeaturesContract(name: symbol, n: number)
.output PreAnalysisFeaturesContract

PreAnalysisFeaturesContract(name, n) :-
    MaxFeat(name),
    n = max n_: PreAnalysisFeatures(name, _, n_).

PreAnalysisFeaturesContract(name, n) :-
    FeatureName(name),
    !MaxFeat(name),
    n = sum n_: PreAnalysisFeatures(name, _, n_).

.decl PreAnalysisFeatures(name: symbol, sigHash: FunctionSignature, n: number)
.output PreAnalysisFeatures

// The following logic is only to get default values
PreAnalysisFeatures(name, ctx, n) :-
  _PreAnalysisFeatures(name, ctx, n).

PreAnalysisFeatures(name, ctx, 0) :-
   Contexts(ctx),
   FeatureName(name),
   !_PreAnalysisFeatures(name, ctx, _).
   

.decl _PreAnalysisFeatures(name: symbol, sigHash: FunctionSignature, n: number)

_PreAnalysisFeatures("C_INS", ctx, n) :-
   Contexts(ctx),
   n = count : {
      ReachableContext(ctx, block),
      postTrans.Statement_Block(_, block)
   }.


_PreAnalysisFeatures("C_Variables", ctx, n):-
   Contexts(ctx),
   n = sum m : {
      ReachableContext(ctx, block),
      postTrans.Statement_Block(statement, block),
      postTrans.Statement_Opcode(statement, opcode),
      OpcodePopWords(opcode, m)
  }.


_PreAnalysisFeatures("C_Edges", ctx, n) :-
   Contexts(ctx),
   n = count : {
      BlockEdge(ctx, _, _, _)
   }.


_PreAnalysisFeatures("C_BlockOutputContents", ctx, n) :-
   Contexts(ctx),
   n = count : {
      BlockOutputContents(ctx, _, _, _)
   }.


_PreAnalysisFeatures("MaxPopDelta", sigHash, n) :-
   Contexts(sigHash),
   n = max delta : {
      ReachableContext(sigHash, block),
      postTrans.BlockPopDelta(block, delta)
   }.

_PreAnalysisFeatures("MaxStackDelta", sigHash, n) :-
   Contexts(sigHash),
   n = max delta : {
      ReachableContext(sigHash, block),
      postTrans.BlockStackDelta(block, delta)
   }.

_PreAnalysisFeatures("C_Jumps", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(jump, block),
      postTrans.IsJump(jump)
   }.

_PreAnalysisFeatures("C_NonImmediateJumps", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      !postTrans.ImmediateBlockJumpTarget(block, _)
   }.

_PreAnalysisFeatures("C_NonImmediateJumpTargets", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      BlockEdge(sigHash, block, sigHash, _),
      !postTrans.ImmediateBlockJumpTarget(block, _)
   }.

_PreAnalysisFeatures("C_StackBalancingBlocks", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.StackBalanceBlock(block)
   }.

_PreAnalysisFeatures("C_StackBalancingBlockTargets", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      BlockEdge(sigHash, block, sigHash, _),
      postTrans.StackBalanceBlock(block)
   }.

_PreAnalysisFeatures("C_CALLDATALOADs", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(cdl, block),
      postTrans.Statement_Opcode(cdl, "CALLDATALOAD")
   }.

_PreAnalysisFeatures("C_CALLDATACOPIEs", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(cdl, block),
      postTrans.Statement_Opcode(cdl, "CALLDATACOPY")
   }.

_PreAnalysisFeatures("C_SLOADs", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(cdc, block),
      postTrans.Statement_Opcode(cdc, "SLOAD")
   }.

_PreAnalysisFeatures("C_SSTOREs", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(cdc, block),
      postTrans.Statement_Opcode(cdc, "SSTORE")
   }.

_PreAnalysisFeatures("MaxDup", sigHash, n) :-
   Contexts(sigHash),
   n = max dupn : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(dup, block),
      postTrans.Statement_Opcode(dup, dupOp),
      postTrans.DUPN(dupOp, dupn)
   }.

_PreAnalysisFeatures("C_REVERTs", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      RevertOrThrowBlock(block)
   }.

_PreAnalysisFeatures("C_ExternalCalls", sigHash, n) :-
   Contexts(sigHash),
   n = count : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(call, block),
      ExternalCall(call)
   }.

_PreAnalysisFeatures("MaxOpcodePop", sigHash, n) :-
   Contexts(sigHash),
   n = max m : {
      ReachableContext(sigHash, block),
      postTrans.Statement_Block(stmt, block),
      postTrans.Statement_Opcode(stmt, opcode),
      OpcodePopWords(opcode, m)
   }.

.decl RevertOrThrowBlock(block: Block)

RevertOrThrowBlock(block):-
  postTrans.Statement_Block(revert, block),
  postTrans.Statement_Opcode(revert, op),
  (op = "REVERT" ; op = "THROW" ; op = "THROWI").

.decl ExternalCall(stmt: Statement)

ExternalCall(call):-
  postTrans.Statement_Opcode(call, op),
  (op = "CALL" ; op = "STATICCALL" ; op = "DELEGATECALL").
