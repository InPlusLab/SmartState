#pragma once

/***
 * Macros
***/
#define STARTSWITH(s, b) (substr(s, 0, strlen(b)) = b)
#define cat3(a, b, c) cat(cat(a, b), c)
#define cat4(a, b, c, d) cat(cat3(a, b, c), d)
 
.decl Fail(msg: symbol)
Fail(a) :- Fail(a). // suppress warning
#define FAILIF(message, ...) Fail(msg) :- msg = message, __VA_ARGS__


#ifdef BULK_ANALYSIS
#define DEBUG_OUTPUT(x)
#else
#define DEBUG_OUTPUT(x) .output x
.output Fail
#endif



#define LIST_OF_1(a)         [a, nil]
#define LIST_OF_2(a,b)       [a, LIST_OF_1(b)]

#define LIST_OF_3(a,...)    [a, LIST_OF_2(__VA_ARGS__)]
#define LIST_OF_4(a,...)    [a, LIST_OF_3(__VA_ARGS__)]
#define LIST_OF_5(a,...)    [a, LIST_OF_4(__VA_ARGS__)]
#define LIST_OF_6(a,...)    [a, LIST_OF_5(__VA_ARGS__)]
#define LIST_OF_7(a,...)    [a, LIST_OF_6(__VA_ARGS__)]

// NUM_ARGS(...) evaluates to the literal number of the passed-in arguments.
#define _NUM_ARGS2(X,X64,X63,X62,X61,X60,X59,X58,X57,X56,X55,X54,X53,X52,X51,X50,X49,X48,X47,X46,X45,X44,X43,X42,X41,X40,X39,X38,X37,X36,X35,X34,X33,X32,X31,X30,X29,X28,X27,X26,X25,X24,X23,X22,X21,X20,X19,X18,X17,X16,X15,X14,X13,X12,X11,X10,X9,X8,X7,X6,X5,X4,X3,X2,X1,N,...) N
#define NUM_ARGS(...) _NUM_ARGS2(0, __VA_ARGS__ ,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0)

#define _LIST_OF_N2(N, ...) LIST_OF_ ## N(__VA_ARGS__)
#define _LIST_OF_N(N, ...) _LIST_OF_N2(N, __VA_ARGS__)

#define LIST(...)     _LIST_OF_N(NUM_ARGS(__VA_ARGS__), __VA_ARGS__)                                
#define STMT(a, b)    ([#a, b])


/***
* Functors
***/

#include "../souffle-addon/functor_includes.dl"


/***
* Utility relations
***/

.decl True()

True().


/***
* Generic Graph algorithms
***/
.comp DominanceFrontier<NodeType> {

    // Inputs
    .decl Node(node: NodeType)
    .decl Edge(u: NodeType, v: NodeType)
    .decl Entry(entry: NodeType)
    
    .decl DoesNotDominate(prev: NodeType, next:NodeType)
    // The entry node can only be dominated by itself
    DoesNotDominate(nDom, entry) :-
        Entry(entry),
        Node(nDom),
        nDom != entry.

    // Does not dominate is transitive, modulo self-loops
    DoesNotDominate(nDom, node) :-
        DoesNotDominate(nDom, other),
        Edge(other, node),
        nDom != node.

    .decl Dominates(dom: NodeType, node: NodeType)
    Dominates(dom, node) :-
       Node(dom),
       Node(node),
       !DoesNotDominate(dom, node).

    .decl StrictlyDominates(dom: NodeType, node: NodeType)
    StrictlyDominates(dom, node) :-
        Dominates(dom, node),
        dom != node.

    // Textbook definition:
    // node is in the dominance frontier of dom, if dom dominates
    // an immediate predecessor of node and dom does not strictly
    // dominate node.
    .decl DominanceFrontier(dom: NodeType, node: NodeType)
    DominanceFrontier(dom, node) :-
        Dominates(dom, pred),
        Edge(pred, node),
        !StrictlyDominates(dom, node).

}
